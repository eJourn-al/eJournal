---

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Check for an existing db-backup directory
  stat:
    path: "{{ db_backup_dir }}"
  register: dbbdir

- name: Ensures the backup directory exists
  file:
    path: "{{ db_backup_dir }}"
    owner: postgres
    group: postgres
    mode: 0775
    state: directory
  when: not dbbdir.stat.exists or not dbbdir.stat.isdir

# NOTE: Order is relevant, db needs to be dropped to prevent object dependencies when restoring.
- name: Ensure database {{ db_name }} is removed
  become: true
  become_user: postgres
  postgresql_db: name={{ db_name }}
                 state=absent

- name: Ensure user {{ db_user }} is removed
  become: true
  become_user: postgres
  postgresql_user: name={{ db_user }}
                   state=absent

- name: Ensure database is created
  become: true
  become_user: postgres
  postgresql_db: name={{ db_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present

- name: Ensure user has access to the database
  become: true
  become_user: postgres
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   encrypted=yes
                   priv=ALL
                   state=present

- name: Ensure user does not have unnecessary privileges
  become: true
  become_user: postgres
  postgresql_user: name={{ db_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present

# Get latest backed up DB
- name: Get files in a folder
  find:
    paths: "/backup/db"
  register: found_db_backups

- name: Get latest db
  set_fact:
    latest_db: "{{ found_db_backups.files | sort(attribute='mtime',reverse=true) | first }}"

# Get latest backed up media
- name: Get files in a folder
  find:
    paths: "/backup/media"
  register: found_media_backups

- name: Get latest media
  set_fact:
    latest_media: "{{ found_media_backups.files | sort(attribute='mtime',reverse=true) | first }}"

- name: Restore db {{ db_name }} from {{ db_backup_dir }}
  postgresql_db:
    name: "{{ db_name }}"
    state: restore
    target: "{{ latest_db.path }}"
  become: yes
  become_user: postgres

- name: Restore media directory
  unarchive:
    src: "{{ latest_media.path }}"
    dest: "{{ virtualenv_path }}"
    remote_src: yes
